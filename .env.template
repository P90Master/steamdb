# Description: This is a template for environment variables
# Usage: Copy this file to .env and fill in the values

# ---------------------------------------
#         PROJECT SCOPE VARIABLES
# ---------------------------------------

# Common variables:

    # (bool) When DEBUG=True, the log message level is set to DEBUG, and template values for secret variables (credentials, tokens, etc.) are allowed
    DEBUG=True

    # (str) Code of country, that is considered primary and will be used by default for worker requests and filter requests in backend
    DEFAULT_COUNTRY_CODE=US

    # (str) URL of Steam app list API endpoint
    STEAM_APP_LIST_URL=http://api.steampowered.com/ISteamApps/GetAppList/v2

    # (str) URL of Steam app detail API endpoint
    STEAM_APP_DETAIL_URL=http://store.steampowered.com/api/appdetails

# Common auth variables:

    # (str) Client ID of base backend's client, which will be created automatically and will be used by the service to interact with the API of other services
    ESSENTIAL_BACKEND_CLIENT_ID=backend

    # (str) Client secret of base backend's client
    ESSENTIAL_BACKEND_CLIENT_SECRET=CHANGE-ME

    # (str) Client ID of base worker's client, which will be created automatically and will be used by the service to interact with the API of other services
    ESSENTIAL_WORKER_CLIENT_ID=worker

    # (str) Client secret of base worker's client
    ESSENTIAL_WORKER_CLIENT_SECRET=CHANGE-ME

    # (str) URL of authentication server
    OAUTH2_SERVER_HOST=auth

    # (int) Port of authentication server
    OAUTH2_SERVER_PORT=8001

    # (int) External port of authentication server admin panel (for Nginx proxy)
    OAUTH2_SERVER_OUTSIDE_PORT=5000

    # (str) External protocol of authentication server admin panel (for Nginx proxy)
    OAUTH2_SERVER_PROTOCOL=http


# ---------------------------------------
#         AUTHENTICATION SERVICE
# ---------------------------------------

# Common variables:

    # (str) Username of superuser, which will be created automatically for access to admin panel
    AUTH_SUPERUSER_USERNAME=admin

    # (str) Password of superuser
    AUTH_SUPERUSER_PASSWORD=admin

# Database variables:

    # (str) Host of auth database
    AUTH_DB_HOST=auth-db

    # (int) Port of auth database
    AUTH_DB_PORT=5432

    # (str) Username of default auth database user
    AUTH_DB_USER=postgres

    # (str) Password of default auth database user
    AUTH_DB_PASSWORD=postgres

    # (str) Main auth database name
    AUTH_DB_NAME=auth

# Cache variables:

    # (str) Host of auth cache server
    AUTH_CACHE_HOST=auth-cache

    # (int) Port of auth cache server
    AUTH_CACHE_PORT=6379

    # (str) Password of auth cache server
    AUTH_CACHE_PASSWORD=CHANGE-ME

    # (str) Protocol for connection to auth cache server
    AUTH_CACHE_PROTOCOL=redis

    # (int) Cache life time
    AUTH_CACHE_TIMEOUT=600

# Periodic tasks variables:

    # (str) Name of celery app for periodic tasks
    AUTH_CELERY_NAME=scheduled_tasks

    # (str) Host of celery broker
    AUTH_CELERY_BROKER_HOST=auth-task-broker

    # (int) Port of celery broker
    AUTH_CELERY_BROKER_PORT=6379

    # (str) Protocol for connection to celery broker
    AUTH_CELERY_BROKER_PROTOCOL=redis

    # (int) Time limit for celery tasks
    AUTH_CELERY_TASK_TIME_LIMIT=1800

    # (str) Cron-style schedule for celery task to clean expired tokens
    AUTH_CELERY_SCHEDULE_CLEAN_EXPIRED_TOKENS='0 */1 * * *'

# Logging variables:

    # (bool) Write logs to file
    AUTH_LOGGER_WRITE_IN_FILE=false

    # (str) Path to logs directory
    AUTH_LOGGER_LOG_FILES_PATH=logs

# Uvicorn variables:

    # (int) Number of uvicorn workers (optimal: CPU count x 2)
    AUTH_WORKERS=4

    # (int) Time limit for keep-alive requests
    AUTH_TIMEOUT_KEEP_ALIVE=60

    # (int) Max number of concurrent connections (optimal: Worker count x 1024-2048)
    AUTH_LIMIT_CONCURRENCY=4096

    # (int) Backlog size
    AUTH_BACKLOG_SIZE=2048


# ---------------------------------------
#             BACKEND SERVICE
# ---------------------------------------

# Common variables:

    # (str) Protocol for connection to backend
    BACKEND_PROTOCOL=http

    # (str) Internal host of backend instance
    BACKEND_HOST=backend

    # (int) Internal port of backend instance
    BACKEND_PORT=8000

    # (str) main API version of backend (for other services)
    BACKEND_API_VERSION=v1

# Database variables:

    # (str) Host of backend database (not main DB)
    BACKEND_DB_HOST=backend-db

    # (int) Port of backend database
    BACKEND_DB_PORT=5432

    # (str) Username of default backend database user
    BACKEND_DB_USER=postgres

    # (str) Password of default backend database user
    BACKEND_DB_PASSWORD=postgres

    # (str) Main backend database name
    BACKEND_DB_NAME=backend

# Cache variables:

    # (str) Host of backend cache server
    BACKEND_CACHE_HOST=backend-cache

    # (int) Port of backend cache server
    BACKEND_CACHE_PORT=6379

    # (str) Protocol for connection to backend cache server
    BACKEND_CACHE_PROTOCOL=redis

    # (int) Cache life time
    BACKEND_CACHE_TIMEOUT=1200

# Logging variables:

    # (bool) Write logs to file
    BACKEND_LOGGER_WRITE_IN_FILE=false

    # (str) Path to logs directory
    BACKEND_LOGGER_LOG_FILES_PATH=logs

# Uvicorn variables:

    # (int) Number of uvicorn workers (optimal: CPU count x 2)
    BACKEND_WORKERS=4

    # (int) Time limit for keep-alive requests
    BACKEND_TIMEOUT_KEEP_ALIVE=60

    # (int) Max number of concurrent connections (optimal: Worker count x 1024-2048)
    BACKEND_LIMIT_CONCURRENCY=4096

    # (int) Backlog size
    BACKEND_BACKLOG_SIZE=2048

# Cluster variables:

    # (int) Number of backend replicas (for docker compose)
    BACKEND_REPLICAS=3


# ------------------------------------------------
#             Full Text Search Service
# ------------------------------------------------

# ETL variables:

    # (str) Protocol for connection to ETL state storage
    FTSEARCH_STATE_STORAGE_PROTOCOL=redis

    # (str) Host of ETL state storage
    FTSEARCH_STATE_STORAGE_HOST=ftsearch-etl-state-storage

    # (int) Port of ETL state storage
    FTSEARCH_STATE_STORAGE_PORT=6379

    # (str) Password for ETL state storage
    FTSEARCH_STATE_STORAGE_PASSWORD=CHANGE-ME

# Index variables:

    # (str) Host of Elasticsearch instance (or input coordinating node for ES cluster)
    FTSEARCH_ELASTICSEARCH_HOST=ftsearch-index

    # (int) Port of Elasticsearch instance (or input coordinating node for ES cluster)
    FTSEARCH_ELASTICSEARCH_PORT=9200

    # (str) User for Elasticsearch cluster
    FTSEARCH_ELASTICSEARCH_USER=elastic1

    # (str) Password for Elasticsearch cluster
    FTSEARCH_ELASTICSEARCH_PASSWORD=CHANGE-ME

    # (str) Name of main full-text-search Elasticsearch index
    FTSEARCH_ELASTICSEARCH_INDEX=steam-apps

    # (str) Memory limit for Elasticsearch (By default index has 1 primary shard => optimal between 10G and 50G and no more than 50% of RAM)
    FTSEARCH_ELASTICSEARCH_MEMORY=512m

    # (int) Batch size for ETL load operation (How many documents will be loaded in one batch)
    FTSEARCH_ETL_BATCH_SIZE=100


# ---------------------------------------
#             Main Database
# ---------------------------------------

# Database variables:

    # (str) Host of main database
    MONGO_HOST=db

    # (int) Port of main database
    MONGO_PORT=27017

    # (str) Username of default main database user
    MONGO_USER=root

    # (str) Password of default main database user
    MONGO_PASSWORD=root

    # (str) Main database name
    MONGO_DB=steam

    # (str) Alias of main database
    MONGO_ALIAS=games-alias

# GUI variables:

    # (int) Port of main database GUI
    MONGO_GUI_PORT=8081


# ---------------------------------------------------------------
#             Workers <-> Orchestrator Message Broker
# ---------------------------------------------------------------

# Broker credentials:

    # (str) Host of broker
    RABBITMQ_HOST=orchestrator-worker-broker

    # (int) Port of broker
    RABBITMQ_PORT=5672

    # (str) Username of default broker user
    RABBITMQ_USER=user

    # (str) Password of default broker user
    RABBITMQ_PASSWORD=password

# Broker connection configuration:

    # (int) Number of connection attempts
    RABBITMQ_CONNECTION_ATTEMPTS=3

    # (int) Delay between connection attempts
    RABBITMQ_CONNECTION_RETRY_DELAY=3

    # (int) Timeout between heartbeats
    RABBITMQ_HEARTBEATS_TIMEOUT=30

    # (int) Max delay between heartbeats
    RABBITMQ_HEARTBEATS_MAX_DELAY=181


# --------------------------------------
#             WORKER SERVICE
# --------------------------------------

# Message broker variables:

    # (str) RabbitMQ queue name of incoming messages
    WORKER_RABBITMQ_INCOME_QUERY=tasks.workers

    # (str) RabbitMQ queue name of outgoing messages
    WORKER_RABBITMQ_OUTCOME_QUERY=tasks.orchestrator

# Conveyor of requests to Steam API tasks variables:

    # (str) Name of Celery conveyor app
    WORKER_CELERY_NAME=requests_to_steam

    # (str) Host of Celery broker
    WORKER_CELERY_BROKER_HOST=worker-celery-broker

    # (int) Port of Celery broker
    WORKER_CELERY_BROKER_PORT=6379

    # (str) Protocol for connection to Celery broker
    WORKER_CELERY_BROKER_PROTOCOL=redis

    # (str) Rate limit for Celery conveyor tasks (amount of requests to Steam API per minute) (no more than 40/m for host without proxy pool)
    WORKER_CELERY_TASK_COMMON_RATE_LIMIT=39/m

    # (int) Time limit for Celery conveyor tasks
    WORKER_CELERY_TASK_TIME_LIMIT=40

# Logging variables:

    # (bool) Write logs to file
    WORKER_LOGGER_WRITE_IN_FILE=false

    # (str) Path to logs directory
    WORKER_LOGGER_LOG_FILES_PATH=logs


# --------------------------------------------
#             ORCHESTRATOR SERVICE
# --------------------------------------------

# Common variables:

    # (int) Amount of updating apps per task
    ORCHESTRATOR_BATCH_SIZE_OF_UPDATING_STEAM_APPS=20

    # (str) Orchestrator's API version
    ORCHESTRATOR_API_VERSION=v1

    # (str) Protocol for connection to orchestrator
    ORCHESTRATOR_PROTOCOL=http

    # (str) Host (internal) of orchestrator instance
    ORCHESTRATOR_HOST=orchestrator

    # (int) Port (internal) of orchestrator instance
    ORCHESTRATOR_PORT=8888

# Message broker variables:

    # (str) RabbitMQ queue name of incoming messages
    ORCHESTRATOR_RABBITMQ_INCOME_QUERY=tasks.orchestrator

    # (str) RabbitMQ queue name of outgoing messages
    ORCHESTRATOR_RABBITMQ_OUTCOME_QUERY=tasks.workers

# Celery variables:

    # (str) Name of Celery app for scheduled tasks
    ORCHESTRATOR_CELERY_NAME=scheduled_tasks

    # (str) Host of Celery broker
    ORCHESTRATOR_CELERY_BROKER_HOST=orchestrator-task-broker

    # (int) Port of Celery broker
    ORCHESTRATOR_CELERY_BROKER_PORT=6379

    # (str) Protocol for connection to Celery broker
    ORCHESTRATOR_CELERY_BROKER_PROTOCOL=redis

    # (int) Time limit for Celery tasks
    ORCHESTRATOR_CELERY_TASK_TIME_LIMIT=1800

    # (str) Cron-style schedule for celery task to  request actual app list
    ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_ACTUAL_APP_LIST='1-59/30 * * * *'

    # (str) Cron-style schedule for celery task to request apps data (main task)
    ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_FOR_APPS_DATA='2-59/10 * * * *'

# Database variables:

    # (str) Host of orchestrator database (contains apps list and last update time for each app)
    ORCHESTRATOR_DB_HOST=orchestrator-db

    # (int) Port of orchestrator database
    ORCHESTRATOR_DB_PORT=5432

    # (str) Type of orchestrator database
    ORCHESTRATOR_DB_TYPE=postgresql

    # (str) Driver of orchestrator database
    ORCHESTRATOR_DB_DRIVER=psycopg

    # (str) Username of default orchestrator database user
    ORCHESTRATOR_DB_USER=user

    # (str) Password of default orchestrator database user
    ORCHESTRATOR_DB_PASSWORD=password

    # (str) Main orchestrator database name
    ORCHESTRATOR_DB_NAME=steam_apps

# Logging variables:

    # (bool) Write logs to file
    ORCHESTRATOR_LOGGER_WRITE_IN_FILE=false

    # (str) Path to logs directory
    ORCHESTRATOR_LOGGER_LOG_FILES_PATH=logs

# Uvicorn variables:

    # (int) Number of uvicorn workers (optimal: CPU count x 2)
    ORCHESTRATOR_WORKERS=4

    # (int) Time limit for keep-alive requests
    ORCHESTRATOR_TIMEOUT_KEEP_ALIVE=60

    # (int) Max number of concurrent connections (optimal: Worker count x 1024-2048)
    ORCHESTRATOR_LIMIT_CONCURRENCY=4096

    # (int) Backlog size
    ORCHESTRATOR_BACKLOG_SIZE=2048


# ---------------------------------------
#             Logging service
# ---------------------------------------

# Logstash variables:

    # (str) Logstash host
    LOGS_LOGSTASH_HOST=log-stash

    # (int) Logstash port
    LOGS_LOGSTASH_PORT=5000

    # (str) Logstash memory
    LOGS_LOGSTASH_MEMORY=512m

# Index variables:

    # (str) Elasticsearch host
    LOGS_ELASTICSEARCH_HOST=log-storage

    # (int) Elasticsearch port
    LOGS_ELASTICSEARCH_PORT=9200

    # (str) Default elasticsearch user
    LOGS_ELASTICSEARCH_USER=elastic1

    # (str) Default elasticsearch user's password
    LOGS_ELASTICSEARCH_PASSWORD=CHANGE-ME

    # (str) Memory limit for Elasticsearch (By default index has 1 primary shard => optimal between 10G and 50G and no more than 50% of RAM)
    LOGS_ELASTICSEARCH_MEMORY=512m

# Message broker variables:

    # (str) Kafka host
    LOGS_KAFKA_HOST=log-queue

    # (int) Kafka port
    LOGS_KAFKA_PORT=9092

    # (str) Kafka cluster coordinator host
    LOGS_ZOOKEEPER_HOST=log-queue-coordinator

    # (int) Kafka cluster coordinator port
    LOGS_ZOOKEEPER_PORT=2181


# ---------------------------------------
#             Web service
# ---------------------------------------

# Web server variables:

    # (str) External host of web server
    WEB_BACKEND_HOST=web # Don't use "localhost" with single host formation ("localhost" doesn't work correctly inside docker containers with default network driver)

    # (int) External port of web server
    WEB_BACKEND_PORT=80
