# TODO: worker & backend deploy replicas
# TODO: security issues (root users, xpack.security, etc.)
name: steamdb

x-oath2-integration-variables: &oath2-integration-variables
  OAUTH2_SERVER_HOST: ${OAUTH2_SERVER_HOST:-auth}
  OAUTH2_SERVER_PORT: ${OAUTH2_SERVER_PORT:-8001}
  OAUTH2_SERVER_PROTOCOL: ${OAUTH2_SERVER_PROTOCOL:-http}

x-common-restart-policy: &common-restart-policy
  restart_policy:
    condition: always
    delay: 5s
    window: 120s

services:

  # auth ############################################################

  auth:
    build:
      context: auth/
    container_name: auth
    profiles: ["", "auth"]
    volumes:
      - auth-static:/auth/static/admin
    environment:
      DEBUG: ${DEBUG:-false}
      LOGGER_WRITE_IN_FILE: ${AUTH_LOGGER_WRITE_IN_FILE:-false}
      LOGGER_LOG_FILES_PATH: ${AUTH_LOGGER_LOG_FILES_PATH:-logs}

      PORT: ${AUTH_PORT:-8001}
      WORKERS: ${AUTH_WORKERS:-4}
      TIMEOUT_KEEP_ALIVE: ${AUTH_TIMEOUT_KEEP_ALIVE:-60}
      LIMIT_CONCURRENCY: ${AUTH_LIMIT_CONCURRENCY:-100}
      BACKLOG_SIZE: ${AUTH_BACKLOG_SIZE:-2048}

      SUPERUSER_USERNAME: ${AUTH_SUPERUSER_USERNAME}
      SUPERUSER_PASSWORD: ${AUTH_SUPERUSER_PASSWORD}
      ESSENTIAL_BACKEND_CLIENT_ID: ${ESSENTIAL_BACKEND_CLIENT_ID}
      ESSENTIAL_BACKEND_CLIENT_SECRET: ${ESSENTIAL_BACKEND_CLIENT_SECRET}
      ESSENTIAL_WORKER_CLIENT_ID: ${ESSENTIAL_WORKER_CLIENT_ID}
      ESSENTIAL_WORKER_CLIENT_SECRET: ${ESSENTIAL_WORKER_CLIENT_SECRET}

      DB_HOST: ${AUTH_DB_HOST:-auth-db}
      DB_PORT: ${AUTH_DB_PORT:-5432}
      DB_USER: ${AUTH_DB_USER}
      DB_PASSWORD: ${AUTH_DB_PASSWORD}
      DB_NAME: ${AUTH_DB_NAME:-auth}

      CELERY_NAME: ${AUTH_CELERY_NAME:-scheduled_tasks}
      CELERY_BROKER_HOST: ${AUTH_CELERY_BROKER_HOST:-auth-task-broker}
      CELERY_BROKER_PORT: ${AUTH_CELERY_BROKER_PORT:-6379}
      CELERY_BROKER_PROTOCOL: ${AUTH_CELERY_BROKER_PROTOCOL:-redis}
      CELERY_TASK_TIME_LIMIT: ${AUTH_CELERY_TASK_TIME_LIMIT:-1800}
      CELERY_SCHEDULE_CLEAN_EXPIRED_TOKENS: ${AUTH_CELERY_SCHEDULE_CLEAN_EXPIRED_TOKENS:-"0 */2 * * *"}

      CACHE_PROTOCOL: ${AUTH_CACHE_PROTOCOL:-redis}
      CACHE_HOST: ${AUTH_CACHE_HOST:-auth-cache}
      CACHE_PORT: ${AUTH_CACHE_PORT:-6379}
      CACHE_PASSWORD: ${AUTH_CACHE_PASSWORD}
      CACHE_TIMEOUT: ${AUTH_CACHE_TIMEOUT}
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 1G
    depends_on:
      auth-db:
        condition: service_healthy
      auth-cache:
        condition: service_healthy
      auth-task-broker:
        condition: service_healthy
    expose:
      - "${AUTH_PORT:-8001}"
    networks:
      - common
      - auth

  auth-db:
    image: postgres:16
    profiles: ["", "auth"]
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME:-auth}
    expose:
      - "${AUTH_DB_PORT:-5432}"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - auth

  auth-cache:
    image: "redis:alpine"
    profiles: ["", "auth"]
    command: redis-server --requirepass ${AUTH_CACHE_PASSWORD}
    expose:
      - "${AUTH_CACHE_PORT:-6379}"
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - auth

  auth-task-broker:
    image: redis:latest
    profiles: ["", "auth"]
    expose:
      - "{AUTH_CELERY_BROKER_PORT:-6379}"
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - auth

  # main db ##############################################################

  db:
    image: mongo
    profiles: ["", "backend"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
    expose:
      - "{MONGO_PORT:-27017}"
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: [ "CMD", "mongosh", "--quiet", "127.0.0.1/test", "--eval", "'db.runCommand({ ping: 1 }).ok ? 0 : 2'" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - backend

  # fulltext search ##############################################################

  ftsearch-index:
    image: elasticsearch:8.4.3
    profiles: ["", "ftsearch"]
    expose:
      - "${FTSEARCH_ELASTICSEARCH_PORT:-9200}"
      - "9300"
    environment:
      cluster.name: ftsearch-index
      discovery.type: single-node
      ELASTIC_PASSWORD: $FTSEARCH_ELASTICSEARCH_PASSWORD
      xpack.security.enabled: false  # TODO: xpack.security.enabled
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: "-Xms${FTSEARCH_ELASTICSEARCH_MEMORY:-512m} -Xmx${FTSEARCH_ELASTICSEARCH_MEMORY:-512m}"
    volumes:
      - ftsearch-index-data:/usr/share/elasticsearch/data
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      # For xpack.security.enabled
      # test: ["CMD-SHELL", "curl -s --cacert /path/to/ca.crt https://localhost:${FTSEARCH_ELASTICSEARCH_PORT:-9200}/_cluster/health | grep -q 'status.:.green'"]
      test: [ "CMD-SHELL", "curl -f http://localhost:${FTSEARCH_ELASTICSEARCH_PORT:-9200}/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend

  ftsearch-etl-state-storage:
    image: redis:latest
    profiles: ["", "ftsearch"]
    command: redis-server --requirepass ${FTSEARCH_STATE_STORAGE_PASSWORD}
    expose:
      - "${FTSEARCH_STATE_STORAGE_PORT:-6379}"
    volumes:
      - ftsearch-etl-state-storage-data:/data
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend

  ftsearch-etl:
    build:
      context: etl/
    profiles: ["", "ftsearch"]
    container_name: ftsearch-etl
    environment:
      DEBUG: ${DEBUG:-false}

      MONGO_HOST: ${MONGO_HOST:-db}
      MONGO_PORT: ${MONGO_PORT:-27017}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB:-apps}

      STATE_STORAGE_PROTOCOL: ${FTSEARCH_STATE_STORAGE_PROTOCOL:-redis}
      STATE_STORAGE_HOST: ${FTSEARCH_STATE_STORAGE_HOST:-ftsearch-etl-state-storage}
      STATE_STORAGE_PORT: ${FTSEARCH_STATE_STORAGE_PORT:-6379}
      STATE_STORAGE_PASSWORD: ${FTSEARCH_STATE_STORAGE_PASSWORD}

      ELASTICSEARCH_HOST: ${FTSEARCH_ELASTICSEARCH_HOST:-ftsearch-index}
      ELASTICSEARCH_PORT: ${FTSEARCH_ELASTICSEARCH_PORT:-9200}
      ELASTICSEARCH_USER: ${FTSEARCH_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${FTSEARCH_ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_INDEX: ${FTSEARCH_ELASTICSEARCH_INDEX:-steam-apps}
      BATCH_SIZE: ${FTSEARCH_ETL_BATCH_SIZE:-100}
    deploy:
      <<: *common-restart-policy
    depends_on:
      ftsearch-index:
        condition: service_healthy
      ftsearch-etl-state-storage:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend

  # backend #########################################################

  backend:
    build:
      context: backend/
    container_name: backend
    profiles: ["", "backend"]
    environment:
      <<: *oath2-integration-variables

      DEBUG: ${DEBUG:-false}
      API_VERSION: ${BACKEND_API_VERSION:-v1}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE:-US}
      LOGGER_WRITE_IN_FILE: ${BACKEND_LOGGER_WRITE_IN_FILE:-false}
      LOGGER_LOG_FILES_PATH: ${BACKEND_LOGGER_LOG_FILES_PATH:-logs}

      PORT: ${BACKEND_PORT:-8000}
      WORKERS: ${BACKEND_WORKERS:-4}
      TIMEOUT_KEEP_ALIVE: ${BACKEND_TIMEOUT_KEEP_ALIVE:-60}
      LIMIT_CONCURRENCY: ${BACKEND_LIMIT_CONCURRENCY:-100}
      BACKLOG_SIZE: ${BACKEND_BACKLOG_SIZE:-2048}

      ESSENTIAL_BACKEND_CLIENT_ID: ${ESSENTIAL_BACKEND_CLIENT_ID}
      ESSENTIAL_BACKEND_CLIENT_SECRET: ${ESSENTIAL_BACKEND_CLIENT_SECRET}

      MONGO_HOST: ${MONGO_HOST:-db}
      MONGO_PORT: ${MONGO_PORT:-27017}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB:-apps}

      CACHE_PROTOCOL: ${BACKEND_CACHE_PROTOCOL:-redis}
      CACHE_HOST: ${BACKEND_CACHE_HOST:-backend-cache}
      CACHE_PORT: ${BACKEND_CACHE_PORT:-6379}
      CACHE_TIMEOUT: ${BACKEND_CACHE_TIMEOUT:-1200}

      ELASTICSEARCH_HOST: ${FTSEARCH_ELASTICSEARCH_HOST:-ftsearch-index}
      ELASTICSEARCH_PORT: ${FTSEARCH_ELASTICSEARCH_PORT:-9200}
      ELASTICSEARCH_USER: ${FTSEARCH_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${FTSEARCH_ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_INDEX: ${FTSEARCH_ELASTICSEARCH_INDEX:-steam-apps}

      ORCHESTRATOR_PROTOCOL: ${ORCHESTRATOR_PROTOCOL:-http}
      ORCHESTRATOR_HOST: ${ORCHESTRATOR_HOST:-orchestrator}
      ORCHESTRATOR_PORT: ${ORCHESTRATOR_PORT:-8888}
      ORCHESTRATOR_API_VERSION: ${ORCHESTRATOR_API_VERSION:-v1}
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 1G
    depends_on:
      db:
        condition: service_healthy
      backend-cache:
        condition: service_healthy
    expose:
      - "${BACKEND_PORT:-8000}"
    networks:
      - backend
      - common

  backend-cache:
    image: redis:latest
    profiles: ["", "backend"]
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    expose:
      - "${BACKEND_CACHE_PORT:-6379}"
    networks:
      - backend

  # orchestrator & workers cluster ###################################

  orchestrator-worker-broker:
    image: rabbitmq:3-management
    profiles: ["", "provider-cluster", "orchestrator", "worker"]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./orchestrator-worker-broker.conf:/etc/rabbitmq/rabbitmq.conf
      - orchestrator-worker-broker-data:/var/lib/rabbitmq
    expose:
      - "{RABBITMQ_PORT:-5672}"
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - orchestrator
      - worker

  # orchestrator #####################################################

  orchestrator:
    build:
      context: /orchestrator
    profiles: ["", "provider-cluster", "orchestrator"]
    container_name: orchestrator
    environment:
      <<: *oath2-integration-variables

      DEBUG: ${DEBUG:-false}
      BATCH_SIZE_OF_UPDATING_STEAM_APPS: ${ORCHESTRATOR_BATCH_SIZE_OF_UPDATING_STEAM_APPS:-20}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE:-US}
      API_VERSION: ${ORCHESTRATOR_API_VERSION:-v1}

      LOGGER_WRITE_IN_FILE: ${ORCHESTRATOR_LOGGER_WRITE_IN_FILE:-false}
      LOGGER_LOG_FILES_PATH: ${ORCHESTRATOR_LOGGER_LOG_FILES_PATH:-logs}

      RABBITMQ_HOST: ${RABBITMQ_HOST:-orchestrator-worker-broker}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_INCOME_QUERY:-tasks_for_orchestrator}
      RABBITMQ_OUTCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_OUTCOME_QUERY:-tasks_for_workers}
      RABBITMQ_CONNECTION_ATTEMPTS: ${RABBITMQ_CONNECTION_ATTEMPTS:-3}
      RABBITMQ_CONNECTION_RETRY_DELAY: ${RABBITMQ_CONNECTION_RETRY_DELAY:-3}
      RABBITMQ_HEARTBEATS_MAX_DELAY: ${RABBITMQ_HEARTBEATS_MAX_DELAY:-120}

      CELERY_NAME: ${ORCHESTRATOR_CELERY_NAME:-scheduled_tasks}
      CELERY_BROKER_HOST: ${ORCHESTRATOR_CELERY_BROKER_HOST:-orchestrator-task-broker}
      CELERY_BROKER_PORT: ${ORCHESTRATOR_CELERY_BROKER_PORT:-6379}
      CELERY_BROKER_PROTOCOL: ${ORCHESTRATOR_CELERY_BROKER_PROTOCOL:-redis}
      CELERY_TASK_TIME_LIMIT: ${ORCHESTRATOR_CELERY_TASK_TIME_LIMIT:-1800}
      CELERY_SCHEDULE_REQUEST_ACTUAL_APP_LIST: ${ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_ACTUAL_APP_LIST:-"0 */1 * * *"}
      CELERY_SCHEDULE_REQUEST_FOR_APPS_DATA: ${ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_FOR_APPS_DATA:-"*/5 * * * *"}

      DB_USER: ${ORCHESTRATOR_DB_USER}
      DB_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      DB_HOST: ${ORCHESTRATOR_DB_HOST:-orchestrator-db}
      DB_PORT: ${ORCHESTRATOR_DB_PORT:-5432}
      DB_NAME: ${ORCHESTRATOR_DB_NAME:-steam_apps}
      DB_DRIVER: ${ORCHESTRATOR_DB_DRIVER:-psycopg}
      DB_TYPE: ${ORCHESTRATOR_DB_TYPE:-postgresql}
    depends_on:
      orchestrator-worker-broker:
        condition: service_healthy
      orchestrator-db:
        condition: service_healthy
      orchestrator-task-broker:
        condition: service_healthy
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 1G
    networks:
      - common
      - orchestrator
    expose:
      - "${ORCHESTRATOR_PORT:-8888}"

  orchestrator-db:
    image: postgres:16
    profiles: ["", "provider-cluster", "orchestrator"]
    environment:
      POSTGRES_USER: ${ORCHESTRATOR_DB_USER}
      POSTGRES_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      POSTGRES_DB: ${ORCHESTRATOR_DB_NAME:-steam_apps}
    expose:
      - "${ORCHESTRATOR_DB_PORT:-5432}"
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ORCHESTRATOR_DB_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - orchestrator-db-data:/var/lib/postgresql/data
    networks:
      - orchestrator

  orchestrator-task-broker:
    image: redis:latest
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    expose:
      - "6379"
    networks:
      - orchestrator

  # worker #########################################################

  worker:
    build:
      context: /worker
    profiles: ["", "provider-cluster", "worker"]
    container_name: worker
    environment:
      <<: *oath2-integration-variables

      DEBUG: ${DEBUG:-false}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE:-US}
      ESSENTIAL_WORKER_CLIENT_ID: ${ESSENTIAL_WORKER_CLIENT_ID}
      ESSENTIAL_WORKER_CLIENT_SECRET: ${ESSENTIAL_WORKER_CLIENT_SECRET}

      LOGGER_WRITE_IN_FILE: ${WORKER_LOGGER_WRITE_IN_FILE:-false}
      LOGGER_LOG_FILES_PATH: ${WORKER_LOGGER_LOG_FILES_PATH:-logs}

      STEAM_APP_LIST_URL: ${STEAM_APP_LIST_URL:-http://api.steampowered.com/ISteamApps/GetAppList/v2}
      STEAM_APP_DETAIL_URL: ${STEAM_APP_DETAIL_URL:-http://store.steampowered.com/api/appdetails}

      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL:-http}
      BACKEND_HOST: ${BACKEND_HOST:-backend}
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION:-v1}

      RABBITMQ_HOST: ${RABBITMQ_HOST:-orchestrator-worker-broker}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${WORKER_RABBITMQ_INCOME_QUERY:-tasks.workers}
      RABBITMQ_OUTCOME_QUERY: ${WORKER_RABBITMQ_OUTCOME_QUERY:-tasks.orchestrator}
      RABBITMQ_CONNECTION_ATTEMPTS: ${RABBITMQ_CONNECTION_ATTEMPTS:-3}
      RABBITMQ_CONNECTION_RETRY_DELAY: ${RABBITMQ_CONNECTION_RETRY_DELAY:-3}
      RABBITMQ_HEARTBEATS_MAX_DELAY: ${RABBITMQ_HEARTBEATS_MAX_DELAY:-120}

      CELERY_NAME: ${WORKER_CELERY_NAME:-scheduled_tasks}
      CELERY_BROKER_HOST: ${WORKER_CELERY_BROKER_HOST:-worker-celery-broker}
      CELERY_BROKER_PORT: ${WORKER_CELERY_BROKER_PORT:-6379}
      CELERY_BROKER_PROTOCOL: ${WORKER_CELERY_BROKER_PROTOCOL:-redis}
      CELERY_TASK_COMMON_RATE_LIMIT: ${WORKER_CELERY_TASK_COMMON_RATE_LIMIT:-39/m}
      CELERY_TASK_TIME_LIMIT: ${WORKER_CELERY_TASK_TIME_LIMIT:-40}
    depends_on:
      orchestrator-worker-broker:
        condition: service_healthy
      worker-celery-broker:
        condition: service_healthy
    deploy:
      <<: *common-restart-policy
    networks:
      - common
      - worker

  worker-celery-broker:
    image: redis:alpine
    profiles: ["", "provider-cluster", "worker"]
    expose:
      - "${WORKER_CELERY_BROKER_PORT:-6379}"
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - worker

  # logs ###########################################################

  log-shipper:
    image: docker.elastic.co/beats/filebeat:8.4.3
    profiles: ["", "logs"]
    command: filebeat -e --strict.perms=false
    user: root  # FIXME: insecure
    volumes:
      - ./logs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock  # FIXME: insecure
        target: /var/run/docker.sock
        read_only: true
    environment:
      KAFKA_HOST: ${LOGS_KAFKA_HOST:-log-queue}
      KAFKA_PORT: ${LOGS_KAFKA_PORT:-9092}
    deploy:
      <<: *common-restart-policy
    networks:
      - common

  log-queue:
    image: wurstmeister/kafka:latest
    profiles: ["", "logs"]
    volumes:
      - log-queue-data:/kafka
    environment:
      # for host connection as well
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${LOGS_KAFKA_HOST:-log-queue}:${LOGS_KAFKA_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT  # FIXME: insecure
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${LOGS_KAFKA_PORT:-9092}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1

      KAFKA_ZOOKEEPER_CONNECT: ${LOGS_ZOOKEEPER_HOST:-log-queue-coordinator}:${LOGS_ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_CONNECTION_TIMEOUT_MS: 18000

      NUM_PARTITIONS: 1
      DEFAULT_REPLICATION_FACTOR: 1
      LOG_RETENTION_HOURS: 168
      LOG_SEGMENT_BYTES: 536870912  # 512 MB
      LOG_RETENTION_CHECK_INTERVAL_MS: 300000

      NUM_NETWORK_THREADS: 3
      NUM_IO_THREADS: 8
      SOCKET_SEND_BUFFER_BYTES: 102400
      SOCKET_RECEIVE_BUFFER_BYTES: 102400
      SOCKET_REQUEST_MAX_BYTES: 104857600
      REQUEST_TIMEOUT_MS: 60000
      SESSION_TIMEOUT_MS: 60000

      DELETE_TOPIC_ENABLE: true
      AUTO_CREATE_TOPICS_ENABLE: true
    expose:
      - "${LOGS_KAFKA_PORT:-9092}"
      - "9094"
    networks:
      - common
    depends_on:
      log-queue-coordinator:
        condition: service_healthy
    deploy:
      <<: *common-restart-policy

  log-queue-coordinator:
    image: wurstmeister/zookeeper:latest
    profiles: ["", "logs"]
    deploy:
      <<: *common-restart-policy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "${LOGS_ZOOKEEPER_PORT:-2181}" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 15s
    expose:
      - "${LOGS_ZOOKEEPER_PORT:-2181}"
    networks:
      - common

  log-stash:  # literally logstash lol
    image: logstash:8.4.3
    profiles: ["", "logs"]
    volumes:
      - ./logs/logstash/config.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logs/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logs/logstash/pipelines:/usr/share/logstash/config/pipelines:ro
    environment:
      LS_JAVA_OPTS: "-Xms${LOGS_LOGSTASH_MEMORY:-512m} -Xmx${LOGS_LOGSTASH_MEMORY:-512m}"
      KAFKA_HOST: ${LOGS_KAFKA_HOST:-log-queue}
      KAFKA_PORT: ${LOGS_KAFKA_PORT:-9092}
      ELASTICSEARCH_HOST: ${LOGS_ELASTICSEARCH_HOST:-log-storage}
      ELASTICSEARCH_PORT: ${LOGS_ELASTICSEARCH_PORT:-9200}
      ELASTICSEARCH_USER: ${LOGS_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${LOGS_ELASTICSEARCH_PASSWORD}
    expose:
      - "${LOGS_LOG_STASH_PORT:-5044}"
      - "9600"
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - common
      - logs
    depends_on:
      log-storage:
        condition: service_healthy

  log-storage:
    image: elasticsearch:8.4.3
    profiles: ["", "logs"]
    volumes:
      - log-storage-data:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xms${LOGS_ELASTICSEARCH_MEMORY:-512m} -Xmx${LOGS_ELASTICSEARCH_MEMORY:-512m}"
      ELASTIC_USERNAME: ${LOGS_ELASTICSEARCH_USER}
      ELASTIC_PASSWORD: ${LOGS_ELASTICSEARCH_PASSWORD}
      xpack.security.enabled: false  # FIXME: insecure
      # TODO: xpack.security.http.ssl.certificate
      discovery.type: single-node
      cluster.name: logs
    deploy:
      <<: *common-restart-policy
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      # For xpack.security.enabled
      # test: ["CMD-SHELL", "curl -s --cacert /path/to/ca.crt https://localhost:${LOGS_ELASTICSEARCH_PORT:-9200}/_cluster/health | grep -q 'status.:.green'"]
      test: [ "CMD-SHELL", "curl -f http://localhost:${LOGS_ELASTICSEARCH_PORT:-9200}/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - logs
    expose:
      - "${LOGS_ELASTICSEARCH_PORT:-9200}"
      - "9300"

  log-storage-gui:
    image: kibana:8.4.3
    profiles: ["", "logs"]
    environment:
      ELASTICSEARCH_HOSTS: "http://${LOGS_ELASTICSEARCH_HOST:-log-storage}:${LOGS_ELASTICSEARCH_PORT:-9200}"
      ELASTICSEARCH_USERNAME: ${LOGS_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${LOGS_ELASTICSEARCH_PASSWORD}
    depends_on:
      log-storage:
        condition: service_healthy
    networks:
      - logs
    ports:
      - "5601:5601"

  # web-servers #######################################################################

  web:
    image: nginx:latest
    profiles: ["", "web"]
    ports:
      - "80:80"
      - "${OAUTH2_SERVER_OUTSIDE_PORT:-5000}:5000"
    environment:
      AUTH_HOST: ${OAUTH2_SERVER_HOST:-OAUTH2_SERVER_HOST}
      AUTH_PORT: ${OAUTH2_SERVER_PORT:-OAUTH2_SERVER_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    command:
      - /bin/bash
      - -c
      - |
        envsubst '$$AUTH_HOST $$AUTH_PORT'< /etc/nginx/conf.d/auth.conf.template > /etc/nginx/conf.d/auth.conf
        envsubst '$$BACKEND_HOST $$BACKEND_PORT' < /etc/nginx/conf.d/backend.conf.template > /etc/nginx/conf.d/backend.conf
        nginx -g 'daemon off;'
    volumes:
      - ./web/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./web/nginx/auth/auth.conf.template:/etc/nginx/conf.d/auth.conf.template
      - ./web/nginx/backend/backend.conf.template:/etc/nginx/conf.d/backend.conf.template
      - auth-static:/usr/share/nginx/html/static/auth/admin
    deploy:
      <<: *common-restart-policy
    networks:
      - common
    depends_on:
      backend:
        condition: service_started
      auth:
        condition: service_started

volumes:
  mongo-data:
  auth-db-data:
  auth-static:
  backend-db-data:
  ftsearch-index-data:
  ftsearch-etl-state-storage-data:
  orchestrator-db-data:
  orchestrator-worker-broker-data:
  log-storage-data:
  log-queue-data:

networks:
  common:
    driver: bridge
  auth:
    driver: bridge
  worker:
    driver: bridge
  orchestrator:
    driver: bridge
  backend:
    driver: bridge
  logs:
    driver: bridge
