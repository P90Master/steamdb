# TODO: cluster name
# TODO: profiles
# TODO: healthcheck
# TODO: container names?
# TODO: depends conditions
# TODO: hostnames
# TODO: build
# TODO: restart
# TODO: worker deploy replicas
# TODO: defaults in environment
# TODO: commons environment variables (f.e. rabbitmq connection credentials)
# TODO: docker-compose.dev.yml
# TODO: solve port conflicts

services:

  # auth ############################################################

  auth:
    build:
      context: auth/
    environment:
      DEBUG: ${DEBUG}

      SUPERUSER_USERNAME: ${AUTH_SUPERUSER_USERNAME}
      SUPERUSER_PASSWORD: ${AUTH_SUPERUSER_PASSWORD}
      ESSENTIAL_BACKEND_CLIENT_ID: ${ESSENTIAL_BACKEND_CLIENT_ID}
      ESSENTIAL_BACKEND_CLIENT_SECRET: ${ESSENTIAL_BACKEND_CLIENT_SECRET}
      ESSENTIAL_WORKER_CLIENT_ID: ${ESSENTIAL_WORKER_CLIENT_ID}
      ESSENTIAL_WORKER_CLIENT_SECRET: ${ESSENTIAL_WORKER_CLIENT_SECRET}

      DB_HOST: ${AUTH_DB_HOST}
      DB_PORT: ${AUTH_DB_PORT}
      DB_USER: ${AUTH_DB_USER}
      DB_PASSWORD: ${AUTH_DB_PASSWORD}
      DB_NAME: ${AUTH_DB_NAME}

      CELERY_NAME: ${AUTH_CELERY_NAME}
      CELERY_BROKER_HOST: ${AUTH_CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${AUTH_CELERY_BROKER_PORT}
      CELERY_BROKER_PROTOCOL: ${AUTH_CELERY_BROKER_PROTOCOL}
      CELERY_TASK_TIME_LIMIT: ${AUTH_CELERY_TASK_TIME_LIMIT}
      CELERY_SCHEDULE_CLEAN_EXPIRED_TOKENS: ${AUTH_CELERY_SCHEDULE_CLEAN_EXPIRED_TOKENS}

      CACHE_PROTOCOL: ${AUTH_CACHE_PROTOCOL}
      CACHE_HOST: ${AUTH_CACHE_HOST}
      CACHE_PORT: ${AUTH_CACHE_PORT}
      CACHE_PASSWORD: ${AUTH_CACHE_PASSWORD}
      CACHE_TIMEOUT: ${AUTH_CACHE_TIMEOUT}
    restart: always
    depends_on:
      - auth-db
      - auth-cache
      - auth-task-broker
    ports:
      - "${AUTH_PORT:-8001}:8001"
    networks:
      - common
      - auth

  auth-db:
    # TODO: configure resources consumption
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    # ports:
    #   - "${AUTH_DB_PORT:-5432}:5432"
    expose:
      - "${AUTH_DB_PORT:-5432}"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - auth

  auth-cache:
    image: "redis:alpine"
    restart: always
    command: redis-server --requirepass ${AUTH_CACHE_PASSWORD}
    expose:
      - "${AUTH_CACHE_PORT:-6379}"
    networks:
      - auth

  auth-task-broker:
    image: redis:latest
    expose:
      - "6379"
    networks:
      - auth

  # main db ##############################################################

  db:
    # TODO: configure resources consumption
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    expose:
      - "27017"
    networks:
      - backend

  db-gui:
    # TODO: docker-compose.dev.yml
    image: mongo-express
    restart: always
    depends_on:
      - db
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: 'mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/'
      ME_CONFIG_BASICAUTH: false
    ports:
      - "8081:8081"
    networks:
      - common
      - backend

  # fulltext search ##############################################################

  ftsearch-index:
    image: elasticsearch:8.4.3
    restart: always
    expose:
      - "${FTSEARCH_ELASTICSEARCH_PORT:-9200}"
      - "9300"
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=$FTSEARCH_ELASTICSEARCH_PASSWORD
      - xpack.security.enabled=false
      - xpack.license.self_generated.type=basic
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms${FTSEARCH_ELASTICSEARCH_MEMORY:-512m} -Xmx${FTSEARCH_ELASTICSEARCH_MEMORY:-512m}"
    volumes:
      - ftsearch-index-data:/usr/share/elasticsearch/data
    networks:
      - backend

  ftsearch-index-gui:
    image: docker.elastic.co/kibana/kibana:8.4.3
    environment:
      ELASTICSEARCH_HOSTS: "http://${FTSEARCH_ELASTICSEARCH_HOST:-ftsearch-index}:${FTSEARCH_ELASTICSEARCH_PORT:-9200}"
      ELASTICSEARCH_USERNAME: ${FTSEARCH_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${FTSEARCH_ELASTICSEARCH_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      - ftsearch-index
    networks:
      - backend

  ftsearch-etl-state-storage:
    image: redis:latest
    command: redis-server --requirepass ${FTSEARCH_STATE_STORAGE_PASSWORD}
    expose:
      - "${FTSEARCH_STATE_STORAGE_PORT:-6379}"
    volumes:
      - ftsearch-etl-state-storage-data:/data
    networks:
      - backend

  ftsearch-etl:
    build:
      context: etl/
    environment:
      DEBUG: ${DEBUG}

      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB}

      STATE_STORAGE_PROTOCOL: ${FTSEARCH_STATE_STORAGE_PROTOCOL}
      STATE_STORAGE_HOST: ${FTSEARCH_STATE_STORAGE_HOST}
      STATE_STORAGE_PORT: ${FTSEARCH_STATE_STORAGE_PORT}
      STATE_STORAGE_PASSWORD: ${FTSEARCH_STATE_STORAGE_PASSWORD}

      ELASTICSEARCH_HOST: ${FTSEARCH_ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${FTSEARCH_ELASTICSEARCH_PORT}
      ELASTICSEARCH_USER: ${FTSEARCH_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${FTSEARCH_ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_INDEX: ${FTSEARCH_ELASTICSEARCH_INDEX}
      BATCH_SIZE: ${FTSEARCH_ETL_BATCH_SIZE}
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    depends_on:
      - ftsearch-index
      - ftsearch-etl-state-storage
      - db
    networks:
      - backend

  # backend #########################################################

  backend:
    build:
      context: backend-ng/
    environment:
      DEBUG: ${DEBUG}
      API_VERSION: ${BACKEND_API_VERSION}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE}

      OAUTH2_SERVER_HOST: ${OAUTH2_SERVER_HOST}
      OAUTH2_SERVER_PORT: ${OAUTH2_SERVER_PORT}
      OAUTH2_SERVER_PROTOCOL: ${OAUTH2_SERVER_PROTOCOL}
      ESSENTIAL_BACKEND_CLIENT_ID: ${ESSENTIAL_BACKEND_CLIENT_ID}
      ESSENTIAL_BACKEND_CLIENT_SECRET: ${ESSENTIAL_BACKEND_CLIENT_SECRET}

      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB}

      CACHE_PROTOCOL: ${BACKEND_CACHE_PROTOCOL}
      CACHE_HOST: ${BACKEND_CACHE_HOST}
      CACHE_PORT: ${BACKEND_CACHE_PORT}
      CACHE_TIMEOUT: ${BACKEND_CACHE_TIMEOUT}

      ELASTICSEARCH_HOST: ${FTSEARCH_ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${FTSEARCH_ELASTICSEARCH_PORT}
      ELASTICSEARCH_USER: ${FTSEARCH_ELASTICSEARCH_USER}
      ELASTICSEARCH_PASSWORD: ${FTSEARCH_ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_INDEX: ${FTSEARCH_ELASTICSEARCH_INDEX}

      ORCHESTRATOR_PROTOCOL: ${ORCHESTRATOR_PROTOCOL}
      ORCHESTRATOR_HOST: ${ORCHESTRATOR_HOST}
      ORCHESTRATOR_PORT: ${ORCHESTRATOR_PORT}
      ORCHESTRATOR_API_VERSION: ${ORCHESTRATOR_API_VERSION}
    restart: always
    depends_on:
      - db
      - backend-cache
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - backend
      - common

#  backend:
#    build:
#      context: backend/
#    environment:
#      SECRET_KEY: ${BACKEND_SECRET_KEY}
#      DEBUG: ${DEBUG}
#      API_VERSION: ${BACKEND_API_VERSION}
#      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE}
#
#      ORCHESTRATOR_PROTOCOL: ${ORCHESTRATOR_PROTOCOL}
#      ORCHESTRATOR_HOST: ${ORCHESTRATOR_HOST}
#      ORCHESTRATOR_PORT: ${ORCHESTRATOR_PORT}
#      ORCHESTRATOR_API_VERSION: ${ORCHESTRATOR_API_VERSION}
#
#      BACKEND_DB_HOST: ${BACKEND_DB_HOST}
#      BACKEND_DB_PORT: ${BACKEND_DB_PORT}
#      BACKEND_DB_USER: ${BACKEND_DB_USER}
#      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
#      BACKEND_DB_NAME: ${BACKEND_DB_NAME}
#
#      CACHE_HOST: ${BACKEND_CACHE_HOST}
#      CACHE_PORT: ${BACKEND_CACHE_PORT}
#      CACHE_TIMEOUT: ${BACKEND_CACHE_TIMEOUT}
#
#      MONGO_HOST: ${MONGO_HOST}
#      MONGO_PORT: ${MONGO_PORT}
#      MONGO_USER: ${MONGO_USER}
#      MONGO_PASSWORD: ${MONGO_PASSWORD}
#      MONGO_ALIAS: ${MONGO_ALIAS}
#      MONGO_DB: ${MONGO_DB}
#    restart: always
#    depends_on:
#      - db
#      - backend-db
#      - backend-cache
#    ports:
#      - "${BACKEND_PORT:-8000}:8000"
#    networks:
#      - common
#      - backend
#
#  backend-db:
#    # TODO: configure resources consumption
#    image: postgres:16
#    restart: always
#    environment:
#      POSTGRES_USER: ${BACKEND_DB_USER}
#      POSTGRES_PASSWORD: ${BACKEND_DB_PASSWORD}
#      POSTGRES_DB: ${BACKEND_DB_NAME}
#    expose:
#      - "${BACKEND_DB_PORT:-5432}"
#    volumes:
#      - backend-db-data:/var/lib/postgresql/data
#    networks:
#      - backend

  backend-cache:
    image: "redis:alpine"
    restart: always
    expose:
      - "${BACKEND_CACHE_PORT:-6379}"
    networks:
      - backend

  # orchestrator & workers cluster ###################################

  orchestrator-worker-broker:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./orchestrator-worker-broker.conf:/etc/rabbitmq/rabbitmq.conf
    expose:
      - "5672"
      - "15672"
    networks:
      - orchestrator
      - worker

  # orchestrator #####################################################

  orchestrator:
    build:
      context: /orchestrator
    environment:
      DEBUG: ${DEBUG}
      BATCH_SIZE_OF_UPDATING_STEAM_APPS: ${ORCHESTRATOR_BATCH_SIZE_OF_UPDATING_STEAM_APPS}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE}
      API_VERSION: ${ORCHESTRATOR_API_VERSION}
      OAUTH2_SERVER_HOST: ${OAUTH2_SERVER_HOST}
      OAUTH2_SERVER_PORT: ${OAUTH2_SERVER_PORT}
      OAUTH2_SERVER_PROTOCOL: ${OAUTH2_SERVER_PROTOCOL}

      LOGGER_WRITE_IN_FILE: ${ORCHESTRATOR_LOGGER_WRITE_IN_FILE}
      LOGGER_LOG_FILES_PATH: ${ORCHESTRATOR_LOGGER_LOG_FILES_PATH}

      STEAM_APP_LIST_URL: ${STEAM_APP_LIST_URL}
      STEAM_APP_DETAIL_URL: ${STEAM_APP_DETAIL_URL}

      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_INCOME_QUERY}
      RABBITMQ_OUTCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_OUTCOME_QUERY}
      RABBITMQ_CONNECTION_ATTEMPTS: ${RABBITMQ_CONNECTION_ATTEMPTS}
      RABBITMQ_CONNECTION_RETRY_DELAY: ${RABBITMQ_CONNECTION_RETRY_DELAY}
      RABBITMQ_HEARTBEATS_MAX_DELAY: ${RABBITMQ_HEARTBEATS_MAX_DELAY}

      CELERY_NAME: ${ORCHESTRATOR_CELERY_NAME}
      CELERY_BROKER_HOST: ${ORCHESTRATOR_CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${ORCHESTRATOR_CELERY_BROKER_PORT}
      CELERY_BROKER_PROTOCOL: ${ORCHESTRATOR_CELERY_BROKER_PROTOCOL}
      CELERY_TASK_TIME_LIMIT: ${ORCHESTRATOR_CELERY_TASK_TIME_LIMIT}
      CELERY_SCHEDULE_REQUEST_ACTUAL_APP_LIST: ${ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_ACTUAL_APP_LIST}
      CELERY_SCHEDULE_REQUEST_FOR_APPS_DATA: ${ORCHESTRATOR_CELERY_SCHEDULE_REQUEST_FOR_APPS_DATA}

      DB_USER: ${ORCHESTRATOR_DB_USER}
      DB_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      DB_HOST: ${ORCHESTRATOR_DB_HOST}
      DB_PORT: ${ORCHESTRATOR_DB_PORT}
      DB_NAME: ${ORCHESTRATOR_DB_NAME}
      DB_DRIVER: ${ORCHESTRATOR_DB_DRIVER}
      DB_TYPE: ${ORCHESTRATOR_DB_TYPE}
    volumes:
      - orchestrator-logs:/orchestrator/logs
    depends_on:
      - orchestrator-worker-broker
      - orchestrator-db
      - orchestrator-task-broker
    networks:
      - common
      - orchestrator
    ports:
      - "${ORCHESTRATOR_PORT:-8888}:8888"

  orchestrator-db:
    # TODO: configure resources consumption
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${ORCHESTRATOR_DB_USER}
      POSTGRES_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      POSTGRES_DB: ${ORCHESTRATOR_DB_NAME}
    ports:
      - "${ORCHESTRATOR_DB_PORT:-5432}:5432"
    volumes:
      - orchestrator-db-data:/var/lib/postgresql/data
    networks:
      - orchestrator

  orchestrator-task-broker:
    image: redis:latest
    expose:
      - "6379"
    networks:
      - orchestrator

  # worker #########################################################

  worker:
    build:
      context: /worker
    environment:
      DEBUG: ${DEBUG}
      DEFAULT_COUNTRY_CODE: ${DEFAULT_COUNTRY_CODE}
      OAUTH2_SERVER_HOST: ${OAUTH2_SERVER_HOST}
      OAUTH2_SERVER_PORT: ${OAUTH2_SERVER_PORT}
      OAUTH2_SERVER_PROTOCOL: ${OAUTH2_SERVER_PROTOCOL}
      ESSENTIAL_WORKER_CLIENT_ID: ${ESSENTIAL_WORKER_CLIENT_ID}
      ESSENTIAL_WORKER_CLIENT_SECRET: ${ESSENTIAL_WORKER_CLIENT_SECRET}

      LOGGER_WRITE_IN_FILE: ${WORKER_LOGGER_WRITE_IN_FILE}
      LOGGER_LOG_FILES_PATH: ${WORKER_LOGGER_LOG_FILES_PATH}

      STEAM_APP_LIST_URL: ${STEAM_APP_LIST_URL}
      STEAM_APP_DETAIL_URL: ${STEAM_APP_DETAIL_URL}

      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${WORKER_RABBITMQ_INCOME_QUERY}
      RABBITMQ_OUTCOME_QUERY: ${WORKER_RABBITMQ_OUTCOME_QUERY}
      RABBITMQ_CONNECTION_ATTEMPTS: ${RABBITMQ_CONNECTION_ATTEMPTS}
      RABBITMQ_CONNECTION_RETRY_DELAY: ${RABBITMQ_CONNECTION_RETRY_DELAY}
      RABBITMQ_HEARTBEATS_MAX_DELAY: ${RABBITMQ_HEARTBEATS_MAX_DELAY}

      CELERY_NAME: ${WORKER_CELERY_NAME}
      CELERY_BROKER_HOST: ${WORKER_CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${WORKER_CELERY_BROKER_PORT}
      CELERY_BROKER_PROTOCOL: ${WORKER_CELERY_BROKER_PROTOCOL}
      CELERY_TASK_COMMON_RATE_LIMIT: ${WORKER_CELERY_TASK_COMMON_RATE_LIMIT}
      CELERY_TASK_TIME_LIMIT: ${WORKER_CELERY_TASK_TIME_LIMIT}
    volumes:
      - worker_logs:/worker/logs
    depends_on:
      - orchestrator-worker-broker
      - worker-celery-broker
    networks:
      - common
      - worker

  worker-celery-broker:
    image: redis:alpine
    expose:
      - "6379"
    networks:
      - worker

  worker-celery-flower:
    # TODO: docker-compose.dev.yml
    image: mher/flower
    # TODO: build broker url
    command: celery --broker=redis://worker-celery-broker:6379/0 flower
    ports:
      - "5555:5555"
    depends_on:
      - worker-celery-broker
      - worker
    networks:
      - common
      - worker

volumes:
  # FIXME: "-" instead of "_"
  mongo_data:
  auth-db-data:
  backend-db-data:
  ftsearch-index-data:
  ftsearch-etl-state-storage-data:
  worker_logs:
  orchestrator-db-data:
  orchestrator-logs:

networks:
  common:
    driver: bridge
  auth:
    driver: bridge
  worker:
    driver: bridge
  orchestrator:
    driver: bridge
  backend:
    driver: bridge
