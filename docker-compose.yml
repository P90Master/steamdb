# TODO: cluster name
# TODO: profiles
# TODO: healthcheck
# TODO: depends conditions
# TODO: hostnames
# TODO: build
# TODO: restart
# TODO: worker deploy replicas
# TODO: defaults in environment

services:
  db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    ports:
      - '27017:27017'

  db-gui:
    # TODO: docker-compose.dev.yml
    image: mongo-express
    restart: always
    depends_on:
      - db
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: 'mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/'
      ME_CONFIG_BASICAUTH: false
    ports:
      - '8081:8081'

  backend:
    build:
      context: backend/
    environment:
      BACKEND_SECRET_KEY: ${BACKEND_SECRET_KEY}
      BACKEND_IS_DEBUG_MODE: ${BACKEND_IS_DEBUG_MODE}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_ALIAS: ${MONGO_ALIAS}
    restart: always
    depends_on:
      - db
    ports:
      - '8000:8000'

  # TODO: backend-db service

  orchestrator:
    build:
      context: /orchestrator
    environment:
      DEBUG: ${DEBUG}
      BATCH_SIZE_OF_UPDATING_STEAM_APPS: ${ORCHESTRATOR_BATCH_SIZE_OF_UPDATING_STEAM_APPS}

      LOGGER_WRITE_IN_FILE: ${ORCHESTRATOR_LOGGER_WRITE_IN_FILE}
      LOGGER_LOG_FILES_PATH: ${ORCHESTRATOR_LOGGER_LOG_FILES_PATH}

      STEAM_APP_LIST_URL: ${STEAM_APP_LIST_URL}
      STEAM_APP_DETAIL_URL: ${STEAM_APP_DETAIL_URL}

      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_INCOME_QUERY}
      RABBITMQ_OUTCOME_QUERY: ${ORCHESTRATOR_RABBITMQ_OUTCOME_QUERY}

      DB_USER: ${ORCHESTRATOR_DB_USER}
      DB_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      DB_HOST: ${ORCHESTRATOR_DB_HOST}
      DB_PORT: ${ORCHESTRATOR_DB_PORT}
      DB_NAME: ${ORCHESTRATOR_DB_NAME}
      DB_DRIVER: ${ORCHESTRATOR_DB_DRIVER}
      DB_TYPE: ${ORCHESTRATOR_DB_TYPE}
    volumes:
      - orchestrator-logs:/orchestrator/logs
    depends_on:
      - orchestrator-worker-broker
      - orchestrator-db

  orchestrator-db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${ORCHESTRATOR_DB_USER}
      POSTGRES_PASSWORD: ${ORCHESTRATOR_DB_PASSWORD}
      POSTGRES_DB: ${ORCHESTRATOR_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - orchestrator-db-data:/var/lib/postgresql/data

  # TODO: orchestrator-celery-beat
  # TODO: special network for orchestrator and its celery-beat

  orchestrator-worker-broker:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"

  worker:
    build:
      context: /worker
    environment:
      DEBUG: ${DEBUG}

      LOGGER_WRITE_IN_FILE: ${WORKER_LOGGER_WRITE_IN_FILE}
      LOGGER_LOG_FILES_PATH: ${WORKER_LOGGER_LOG_FILES_PATH}

      STEAM_APP_LIST_URL: ${STEAM_APP_LIST_URL}
      STEAM_APP_DETAIL_URL: ${STEAM_APP_DETAIL_URL}

      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_INCOME_QUERY: ${WORKER_RABBITMQ_INCOME_QUERY}
      RABBITMQ_OUTCOME_QUERY: ${WORKER_RABBITMQ_OUTCOME_QUERY}

      CELERY_NAME: ${WORKER_CELERY_NAME}
      CELERY_BROKER_HOST: ${WORKER_CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${WORKER_CELERY_BROKER_PORT}
      CELERY_BROKER_PROTOCOL: ${WORKER_CELERY_BROKER_PROTOCOL}
      CELERY_TASK_COMMON_RATE_LIMIT: ${WORKER_CELERY_TASK_COMMON_RATE_LIMIT}
      CELERY_TASK_TIME_LIMIT: ${WORKER_CELERY_TASK_TIME_LIMIT}
    volumes:
      - worker_logs:/worker/logs
    depends_on:
      - orchestrator-worker-broker
      - worker-celery-broker
    # TODO: special network for worker and its celery-broker

  worker-celery-broker:
    image: redis:alpine
    ports:
      - '6379:6379'

  worker-celery-flower:
    # TODO: docker-compose.dev.yml
    image: mher/flower
    # TODO: build broker url
    command: celery --broker=redis://worker-celery-broker:6379/0 flower
    ports:
      - "5555:5555"
    depends_on:
      - worker-celery-broker
      - worker

volumes:
  # FIXME: "-" instead of "_"
  mongo_data:
  worker_logs:
  orchestrator-db-data:
  orchestrator-logs:
